plugins {
    id 'java'
    id 'io.github.goooler.shadow' version '8.1.8'
}

group = 'me.michelemanna'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "xenondevs"
        url = "https://repo.xenondevs.xyz/releases"
    }
    maven {
        name = "lorenzo0111"
        url = "https://dl.lorenzo0111.me/releases"
    }
}

dependencies {
    compileOnly("org.spigotmc:spigot-api:1.21.4-R0.1-SNAPSHOT")
    compileOnly("com.github.MilkBowl:VaultAPI:1.7")
    implementation("com.zaxxer:HikariCP:6.2.1")
    implementation("xyz.xenondevs.invui:invui:1.43")
    implementation("com.github.cryptomorin:XSeries:12.0.0")
    implementation("me.lorenzo0111:jshader:1.1.1")
}

shadowJar {
    archiveClassifier.set("")

    relocate("xyz.xenondevs.inventoryaccess", "me.michelemanna.kingdoms.libs.inventoryaccess")
    relocate("xyz.xenondevs.invui", "me.michelemanna.kingdoms.libs.invui")
    relocate("xyz.xenondevs.invui", "me.michelemanna.kingdoms.libs.invui")
    relocate("com.zaxxer.hikari", "me.michelemanna.kingdoms.libs.hikari")
    relocate("com.cryptomorin.xseries", "me.michelemanna.kingdoms.libs.xseries")
    relocate("me.lorenzo0111.js", "me.michelemanna.kingdoms.libs.js")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks.build.dependsOn tasks.shadowJar